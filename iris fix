local Config = getgenv().BypassOptions or {
    ["Adonis"] = true,

    ["Enable Kill Logs"] = true,
}

local function performKillLog(...) if Config["Enable Kill Logs"] then warn("[[IRIS ANTI ANTI-EXPLOIT]]", ...) end end
local function breakFunction() return task.wait(10e10) end;
local function find(gcObject, ...)
    local gcResult = true;
    for _, constant in next, {...} do
        if not table.find(gcObject, constant) then
            gcResult = false
            break
        end
    end
    if gcResult then return gcObject end;
    return nil;
end

local SearchFunctions = {
    GarbageCollection = {
        ConstantsLookup = function(...) 
            for _, gcObject in next, getgc() do
                if type(gcObject) == "function" and islclosure(gcObject) then
                    return find(debug.getconstants(gcObject), ...)
                end
            end
        end,
        UpValuesLookup = function(...) 
            for _, gcObject in next, getgc() do
                if type(gcObject) == "function" and islclosure(gcObject) then
                    return find(debug.getupvalues(gcObject), ...)
                end
            end
        end,
        FunctionNameLookup = function(functionName)
            for _, gcObject in next, getgc() do
                if type(gcObject) == "function" and islclosure(gcObject) and getinfo(gcObject).name == functionName then
                    return gcObject
                end
            end
        end,
    },
    Registry = {
        ConstantsLookup = function(...) 
            for _, RegObject in next, getreg() do
                if type(RegObject) == "function" and islclosure(RegObject) then
                    return find(debug.getconstants(RegObject), ...)
                end
            end
        end,
        UpValuesLookup = function(...) 
            for _, RegObject in next, getreg() do
                if type(RegObject) == "function" and islclosure(RegObject) then
                    return find(debug.getupvalues(RegObject), ...)
                end
            end
        end,
        FunctionNameLookup = function(functionName)
            for _, RegObject in next, getgc() do
                if type(RegObject) == "function" and islclosure(RegObject) and getinfo(RegObject).name == functionName then
                    return RegObject
                end
            end
        end,
    }
}

if Config["Adonis"] then
    local detectedFunction = SearchFunctions.GarbageCollection.ConstantsLookup("_", "crash", ":: Adonis Anti Cheat::", "Detected");
    if detectedFunction then
        performKillLog("{Adonis} Detected Break");
        hookfunction(detectedFunction, breakFunction)
    end
end
